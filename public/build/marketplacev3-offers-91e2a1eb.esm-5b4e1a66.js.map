{"version":3,"file":"marketplacev3-offers-91e2a1eb.esm-5b4e1a66.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/marketplacev3-offers-91e2a1eb.esm.js"],"sourcesContent":["import { BigNumber, Contract, constants, utils } from 'ethers';\nimport invariant from 'tiny-invariant';\nimport { c as cleanCurrencyAddress } from './cleanCurrencyAddress-42c17db5.esm.js';\nimport { C as ContractEncoder, a as fetchCurrencyValue, f as fetchCurrencyMetadata, i as isNativeToken } from './fetchCurrencyValue-f402c164.esm.js';\nimport { n as normalizePriceValue } from './normalizePriceValue-0b2ee3a8.esm.js';\nimport { s as setErc20Allowance } from './setErc20Allowance-41d4cdc2.esm.js';\nimport { bd as AddressOrEnsSchema, ba as BigNumberishSchema, aZ as NATIVE_TOKEN_ADDRESS, cz as AmountSchema, dz as FEATURE_DIRECT_LISTINGS, aP as resolveAddress, dA as FEATURE_ENGLISH_AUCTIONS, w as AuctionHasNotEndedError, dB as FEATURE_OFFERS, a_ as NATIVE_TOKENS, cu as ContractWrapper } from './index-4902f18c.esm.js';\nimport { g as getAllInBatches, i as isTokenApprovedForTransfer, h as handleTokenApproval } from './marketplace-302aa6cf.esm.js';\nimport { c as fetchTokenMetadataForContract, I as InterfaceId_IERC721, a as InterfaceId_IERC1155 } from './QueryParams-fc338c68.esm.js';\nimport { b as buildTransactionFunction, T as Transaction } from './transactions-bf210f84.esm.js';\nimport { R as RawDateSchema, E as EndDateSchema } from './assertEnabled-1fa10adb.esm.js';\nimport { z } from 'zod';\nimport { a as ContractEvents, G as GasCostEstimator } from './contract-appuri-c2530b2f.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-69c9c882.esm.js';\n\n/**\n * @internal\n */\nconst DirectListingInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being listed.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token to list.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The price to pay per unit of NFTs listed.\n   */\n  pricePerToken: AmountSchema,\n  /**\n   * The start time of the listing.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the listing.\n   */\n  endTimestamp: EndDateSchema,\n  /**\n   * Whether the listing is reserved to be bought from a specific set of buyers.\n   */\n  isReservedListing: z.boolean().default(false)\n}))();\n\n/**\n * @public\n */\n\nlet Status = /*#__PURE__*/function (Status) {\n  Status[Status[\"UNSET\"] = 0] = \"UNSET\";\n  Status[Status[\"Created\"] = 1] = \"Created\";\n  Status[Status[\"Completed\"] = 2] = \"Completed\";\n  Status[Status[\"Cancelled\"] = 3] = \"Cancelled\";\n  Status[Status[\"Active\"] = 4] = \"Active\";\n  Status[Status[\"Expired\"] = 5] = \"Expired\";\n  return Status;\n}({});\n\n/**\n * Handles direct listings\n * @public\n */\nclass MarketplaceV3DirectListings {\n  featureName = FEATURE_DIRECT_LISTINGS.name;\n\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of direct listings\n   *\n   * @returns Returns the total number of direct listings created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalListings = await contract.directListings.getTotalCount();\n   * ```\n   * @twfeature DirectListings\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalListings\", []);\n  }\n\n  /**\n   * Get all direct listings\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns The Direct listing object array\n   * @twfeature DirectListings\n   */\n  async getAll(filter) {\n    const totalListings = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllListings\", [startId, endId]));\n    rawListings = batches.flat();\n    const filteredListings = await this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get all valid direct listings\n   *\n   * @remarks A valid listing is where the listing is active, and the creator still owns & has approved Marketplace to transfer the listed NFTs.\n   *\n   * @example\n   * ```javascript\n   * const listings = await contract.directListings.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns The Direct listing object array\n   * @twfeature DirectListings\n   */\n  async getAllValid(filter) {\n    const totalListings = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalListings.toNumber();\n    if (end === 0) {\n      throw new Error(`No listings exist on the contract.`);\n    }\n    let rawListings = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidListings\", [startId, endId]));\n    rawListings = batches.flat();\n    const filteredListings = await this.applyFilter(rawListings, filter);\n    return await Promise.all(filteredListings.map(listing => this.mapListing(listing)));\n  }\n\n  /**\n   * Get a single direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @returns The Direct listing object\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const listing = await contract.directListings.getListing(listingId);\n   * ```\n   * @twfeature DirectListings\n   */\n  async getListing(listingId) {\n    const listing = await this.contractWrapper.read(\"getListing\", [listingId]);\n    return await this.mapListing(listing);\n  }\n\n  /**\n   * Check if a buyer is approved for a specific direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const isBuyerApproved = await contract.directListings.isBuyerApprovedForListing(listingId, \"{{wallet_address}}\");\n   * ```\n   *\n   * @param listingId - the listing id\n   * @param buyer - buyer address\n   * @twfeature DirectListings\n   */\n  async isBuyerApprovedForListing(listingId, buyer) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    if (!listing.isReservedListing) {\n      throw new Error(`Listing ${listingId} is not a reserved listing.`);\n    }\n    return await this.contractWrapper.read(\"isBuyerApprovedForListing\", [listingId, await resolveAddress(buyer)]);\n  }\n\n  /**\n   * Check if a currency is approved for a specific direct listing\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const currencyContractAddress = '0x1234';\n   * const isApproved = await contract.directListings.isCurrencyApprovedForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @param currency - currency address\n   * @twfeature DirectListings\n   */\n  async isCurrencyApprovedForListing(listingId, currency) {\n    await this.validateListing(BigNumber.from(listingId));\n    return await this.contractWrapper.read(\"isCurrencyApprovedForListing\", [listingId, await resolveAddress(currency)]);\n  }\n\n  /**\n   * Check price per token for an approved currency\n   *\n   * @example\n   * ```javascript\n   * const listingId = 0;\n   * const currencyContractAddress = '0x1234';\n   * const price = await contract.directListings.currencyPriceForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - the listing id\n   * @param currencyContractAddress - currency contract address\n   * @twfeature DirectListings\n   */\n  async currencyPriceForListing(listingId, currencyContractAddress) {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n      return listing.pricePerToken;\n    }\n    const isApprovedCurrency = await this.isCurrencyApprovedForListing(listingId, resolvedCurrencyAddress);\n    if (!isApprovedCurrency) {\n      throw new Error(`Currency ${resolvedCurrencyAddress} is not approved for Listing ${listingId}.`);\n    }\n    return await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create new direct listing\n   *\n   * @remarks Create a new listing on the marketplace where people can buy an asset directly.\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to create\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()),\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.createListing(listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   * @twfeature DirectListings\n   */\n  createListing = /* @__PURE__ */buildTransactionFunction(async listing => {\n    const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedListing.startTimestamp.lt(blockTime)) {\n      parsedListing.startTimestamp = BigNumber.from(blockTime);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createListing\",\n      args: [{\n        assetContract: parsedListing.assetContractAddress,\n        tokenId: parsedListing.tokenId,\n        quantity: parsedListing.quantity,\n        currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n        pricePerToken: normalizedPricePerToken,\n        startTimestamp: parsedListing.startTimestamp,\n        endTimestamp: parsedListing.endTimestamp,\n        reserved: parsedListing.isReservedListing\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new listings\n   *\n   * @remarks Create a batch of new listings on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const listings = [...];\n   * const tx = await contract.directListings.createListingsBatch(listings);\n   * ```\n   */\n  createListingsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = (await Promise.all(listings.map(listing => this.createListing.prepare(listing)))).map(tx => tx.encode());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"NewListing\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.listingId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Update a direct listing\n   *\n   * @param listing - the new listing information\n   *\n   * @example\n   * ```javascript\n   * // Data of the listing you want to update\n   *\n   * const listingId = 0; // ID of the listing you want to update\n   *\n   * const listing = {\n   *   // address of the contract the asset you want to list is on\n   *   assetContractAddress: \"0x...\", // should be same as original listing\n   *   // token ID of the asset you want to list\n   *   tokenId: \"0\", // should be same as original listing\n   *   // how many of the asset you want to list\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the listing\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // The price to pay per unit of NFTs listed.\n   *   pricePerToken: 1.5,\n   *   // when should the listing open up for offers\n   *   startTimestamp: new Date(Date.now()), // can't change this if listing already active\n   *   // how long the listing will be open for\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   *   // Whether the listing is reserved for a specific set of buyers.\n   *   isReservedListing: false\n   * }\n   *\n   * const tx = await contract.directListings.updateListing(listingId, listing);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created listing\n   * ```\n   * @twfeature DirectListings\n   */\n  updateListing = /* @__PURE__ */buildTransactionFunction(async (listingId, listing) => {\n    const parsedListing = await DirectListingInputParamsSchema.parseAsync(listing);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedListing.assetContractAddress, parsedListing.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedPricePerToken = await normalizePriceValue(this.contractWrapper.getProvider(), parsedListing.pricePerToken, parsedListing.currencyContractAddress);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"updateListing\",\n      args: [listingId, {\n        assetContract: parsedListing.assetContractAddress,\n        tokenId: parsedListing.tokenId,\n        quantity: parsedListing.quantity,\n        currency: cleanCurrencyAddress(parsedListing.currencyContractAddress),\n        pricePerToken: normalizedPricePerToken,\n        startTimestamp: parsedListing.startTimestamp,\n        endTimestamp: parsedListing.endTimestamp,\n        reserved: parsedListing.isReservedListing\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"UpdatedListing\", receipt?.logs);\n        return {\n          id: event[0].args.listingId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Cancel Direct Listing\n   *\n   * @remarks Cancel a direct listing on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to cancel\n   * const listingId = 0;\n   *\n   * await contract.directListings.cancelListing(listingId);\n   * ```\n   * @twfeature DirectListings\n   */\n  cancelListing = /* @__PURE__ */buildTransactionFunction(async listingId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelListing\",\n      args: [listingId]\n    });\n  });\n\n  /**\n   * Buy direct listing for a specific wallet\n   *\n   * @remarks Buy from a specific direct listing from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the listing you want to buy from\n   * const listingId = 0;\n   * // Quantity of the asset you want to buy\n   * const quantityDesired = 1;\n   *\n   * await contract.directListings.buyFromListing(listingId, quantityDesired, \"{{wallet_address}}\");\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param quantityDesired - the quantity to buy\n   * @param receiver - optional receiver of the bought listing if different from the connected wallet\n   * @twfeature DirectListings\n   */\n  buyFromListing = /* @__PURE__ */buildTransactionFunction(async (listingId, quantityDesired, receiver) => {\n    if (receiver) {\n      receiver = await resolveAddress(receiver);\n    }\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidListing(listing, quantityDesired);\n    if (!valid) {\n      throw new Error(`Listing ${listingId} is no longer valid. ${error}`);\n    }\n    const buyFor = receiver ? receiver : await this.contractWrapper.getSignerAddress();\n    const quantity = BigNumber.from(quantityDesired);\n    const value = BigNumber.from(listing.pricePerToken).mul(quantity);\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, value, listing.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"buyFromListing\",\n      args: [listingId, buyFor, quantity, listing.currencyContractAddress, value],\n      overrides\n    });\n  });\n\n  /**\n   * Approve buyer for a reserved direct listing\n   *\n   * @remarks Approve a buyer to buy from a reserved listing.\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveBuyerForReservedListing(listingId, \"{{wallet_address}}\");\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   * @twfeature DirectListings\n   */\n  approveBuyerForReservedListing = /* @__PURE__ */buildTransactionFunction(async (listingId, buyer) => {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (!isApproved) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approveBuyerForListing\",\n        args: [listingId, buyer, true]\n      });\n    } else {\n      throw new Error(`Buyer ${buyer} already approved for listing ${listingId}.`);\n    }\n  });\n\n  /**\n   * Revoke approval of a buyer for a reserved direct listing\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to approve buyer for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeBuyerApprovalForReservedListing(listingId, \"{{wallet_address}}\");\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param buyer - Address of buyer being approved\n   */\n  revokeBuyerApprovalForReservedListing = /* @__PURE__ */buildTransactionFunction(async (listingId, buyer) => {\n    const isApproved = await this.isBuyerApprovedForListing(listingId, buyer);\n    if (isApproved) {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"approveBuyerForListing\",\n        args: [listingId, buyer, false]\n      });\n    } else {\n      throw new Error(`Buyer ${buyer} not approved for listing ${listingId}.`);\n    }\n  });\n\n  /**\n   * Approve a currency for a direct listing\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to approve currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.approveCurrencyForListing(listingId, currencyContractAddress, pricePerTokenInCurrency);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency being approved\n   * @param pricePerTokenInCurrency - Price per token in the currency\n   * @twfeature DirectListings\n   */\n  approveCurrencyForListing = /* @__PURE__ */buildTransactionFunction(async (listingId, currencyContractAddress, pricePerTokenInCurrency) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n      invariant(pricePerTokenInCurrency === listing.pricePerToken, \"Approving listing currency with a different price.\");\n    }\n    const currencyPrice = await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n    invariant(pricePerTokenInCurrency === currencyPrice, \"Currency already approved with this price.\");\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approveCurrencyForListing\",\n      args: [listingId, resolvedCurrencyAddress, pricePerTokenInCurrency]\n    });\n  });\n\n  /**\n   * Revoke approval of a currency for a direct listing\n   *\n   *\n   * @example\n   * ```javascript\n   * // The listing ID of the direct listing you want to revoke currency for\n   * const listingId = \"0\";\n   *\n   * await contract.directListings.revokeCurrencyApprovalForListing(listingId, currencyContractAddress);\n   * ```\n   *\n   * @param listingId - The listing id to buy\n   * @param currencyContractAddress - Address of currency\n   * @twfeature DirectListings\n   */\n  revokeCurrencyApprovalForListing = /* @__PURE__ */buildTransactionFunction(async (listingId, currencyContractAddress) => {\n    const listing = await this.validateListing(BigNumber.from(listingId));\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    if (resolvedCurrencyAddress === listing.currencyContractAddress) {\n      throw new Error(`Can't revoke approval for main listing currency.`);\n    }\n    const currencyPrice = await this.contractWrapper.read(\"currencyPriceForListing\", [listingId, resolvedCurrencyAddress]);\n    invariant(!currencyPrice.isZero(), \"Currency not approved.\");\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approveCurrencyForListing\",\n      args: [listingId, resolvedCurrencyAddress, BigNumber.from(0)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if listing could not be found\n   *\n   * @param listingId - Listing to check for\n   */\n  async validateListing(listingId) {\n    try {\n      return await this.getListing(listingId);\n    } catch (err) {\n      console.error(`Error getting the listing with id ${listingId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction listing to the direct listing interface.\n   *\n   * @internal\n   * @param listing - The listing to map, as returned from the contract.\n   * @returns  The mapped interface.\n   */\n  async mapListing(listing) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (listing.status) {\n      case 1:\n        status = BigNumber.from(listing.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(listing.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      assetContractAddress: listing.assetContract,\n      currencyContractAddress: listing.currency,\n      pricePerToken: listing.pricePerToken.toString(),\n      currencyValuePerToken: await fetchCurrencyValue(this.contractWrapper.getProvider(), listing.currency, listing.pricePerToken),\n      id: listing.listingId.toString(),\n      tokenId: listing.tokenId.toString(),\n      quantity: listing.quantity.toString(),\n      startTimeInSeconds: BigNumber.from(listing.startTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(listing.assetContract, this.contractWrapper.getProvider(), listing.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(listing.endTimestamp).toNumber(),\n      creatorAddress: listing.listingCreator,\n      isReservedListing: listing.reserved,\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if a direct listing is still valid.\n   *\n   * Ways a direct listing can become invalid:\n   * 1. The asset holder transferred the asset to another wallet\n   * 2. The asset holder burned the asset\n   * 3. The asset holder removed the approval on the marketplace\n   *\n   * @internal\n   * @param listing - The listing to check.\n   * @returns  True if the listing is valid, false otherwise.\n   */\n  async isStillValidListing(listing, quantity) {\n    const approved = await isTokenApprovedForTransfer(this.contractWrapper.getProvider(), this.getAddress(), listing.assetContractAddress, listing.tokenId, listing.creatorAddress);\n    if (!approved) {\n      return {\n        valid: false,\n        error: `Token '${listing.tokenId}' from contract '${listing.assetContractAddress}' is not approved for transfer`\n      };\n    }\n    const provider = this.contractWrapper.getProvider();\n    const ERC165Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC165.json')).default;\n    const erc165 = new Contract(listing.assetContractAddress, ERC165Abi, provider);\n    const isERC721 = await erc165.supportsInterface(InterfaceId_IERC721);\n    const isERC1155 = await erc165.supportsInterface(InterfaceId_IERC1155);\n    if (isERC721) {\n      const ERC721Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC721.json')).default;\n      const asset = new Contract(listing.assetContractAddress, ERC721Abi, provider);\n\n      // Handle reverts in case of non-existent tokens\n      let owner;\n      try {\n        owner = await asset.ownerOf(listing.tokenId);\n      } catch (e) {}\n      const valid = owner?.toLowerCase() === listing.creatorAddress.toLowerCase();\n      return {\n        valid,\n        error: valid ? undefined : `Seller is not the owner of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} anymore'`\n      };\n    } else if (isERC1155) {\n      const ERC1155Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC1155.json')).default;\n      const asset = new Contract(listing.assetContractAddress, ERC1155Abi, provider);\n      const balance = await asset.balanceOf(listing.creatorAddress, listing.tokenId);\n      const valid = balance.gte(quantity || listing.quantity);\n      return {\n        valid,\n        error: valid ? undefined : `Seller does not have enough balance of Token '${listing.tokenId}' from contract '${listing.assetContractAddress} to fulfill the listing`\n      };\n    } else {\n      return {\n        valid: false,\n        error: \"Contract does not implement ERC 1155 or ERC 721.\"\n      };\n    }\n  }\n  async applyFilter(listings, filter) {\n    let rawListings = [...listings];\n    if (filter) {\n      if (filter.seller) {\n        const resolvedSeller = await resolveAddress(filter.seller);\n        rawListings = rawListings.filter(seller => seller.listingCreator.toString().toLowerCase() === resolvedSeller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawListings = rawListings.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawListings = rawListings.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawListings.length ? rawListings.slice(0, filter.count) : rawListings;\n  }\n}\n\n/**\n * @internal\n */\nconst EnglishAuctionInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being auctioned.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token to auction.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to include in the listing.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency to accept for the listing.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The minimum price that a bid must be in order to be accepted.\n   */\n  minimumBidAmount: AmountSchema,\n  /**\n   * The buyout price of the auction.\n   */\n  buyoutBidAmount: AmountSchema,\n  /**\n   * This is a buffer e.g. x seconds.\n   *\n   * If a new winning bid is made less than x seconds before expirationTimestamp, the\n   * expirationTimestamp is increased by x seconds.\n   */\n  timeBufferInSeconds: BigNumberishSchema.default(900),\n  // 15 minutes by default\n\n  /**\n   * This is a buffer in basis points e.g. x%.\n   *\n   * To be considered as a new winning bid, a bid must be at least x% greater than\n   * the current winning bid.\n   */\n  bidBufferBps: BigNumberishSchema.default(500),\n  // 5% by default\n\n  /**\n   * The start time of the auction.\n   */\n  startTimestamp: RawDateSchema.default(new Date()),\n  /**\n   * The end time of the auction.\n   */\n  endTimestamp: EndDateSchema\n}))();\n\n/**\n * @public\n */\n\n/**\n * Handles auctions\n * @public\n */\nclass MarketplaceV3EnglishAuctions {\n  featureName = FEATURE_ENGLISH_AUCTIONS.name;\n\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of english auctions\n   *\n   * @returns Returns the total number of auctions created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalAuctions = await contract.englishAuctions.getTotalCount();\n   * ```\n   * @twfeature EnglishAuctions\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalAuctions\", []);\n  }\n\n  /**\n   * Get all english auctions\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns The Auction object array\n   * @twfeature EnglishAuctions\n   */\n  async getAll(filter) {\n    const totalAuctions = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllAuctions\", [startId, endId]));\n    rawAuctions = batches.flat();\n    const filteredAuctions = await this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get all valid english auctions\n   *\n   * @example\n   * ```javascript\n   * const auctions = await contract.englishAuctions.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns The Auction object array\n   * @twfeature EnglishAuctions\n   */\n  async getAllValid(filter) {\n    const totalAuctions = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalAuctions.toNumber();\n    if (end === 0) {\n      throw new Error(`No auctions exist on the contract.`);\n    }\n    let rawAuctions = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidAuctions\", [startId, endId]));\n    rawAuctions = batches.flat();\n    const filteredAuctions = await this.applyFilter(rawAuctions, filter);\n    return await Promise.all(filteredAuctions.map(auction => this.mapAuction(auction)));\n  }\n\n  /**\n   * Get a single english auction\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const auction = await contract.englishAuctions.getAuction(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction Id\n   * @returns The Auction object\n   * @twfeature EnglishAuctions\n   */\n  async getAuction(auctionId) {\n    const auction = await this.contractWrapper.read(\"getAuction\", [auctionId]);\n    return await this.mapAuction(auction);\n  }\n\n  /**\n   * Get winning bid of an english auction\n   *\n   * @remarks Get the current highest bid of an active auction.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction\n   * const auctionId = 0;\n   * const winningBid = await contract.englishAuctions.getWinningBid(auctionId);\n   * ```\n   * @param auctionId - the auction Id\n   * @twfeature EnglishAuctions\n   */\n  async getWinningBid(auctionId) {\n    await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.read(\"getWinningBid\", [auctionId]);\n    if (bid._bidder === constants.AddressZero) {\n      return undefined;\n    }\n    return await this.mapBid(auctionId.toString(), bid._bidder, bid._currency, bid._bidAmount.toString());\n  }\n\n  /**\n   * Check if a bid is or will be a winning bid\n   *\n   * @example\n   * ```javascript\n   * const auctionId = 0;\n   * const bidAmount = 100;\n   * const isWinningBid = await contract.englishAuctions.isWinningBid(auctionId, bidAmount);\n   * ```\n   *\n   * @param auctionId - Auction Id\n   * @param bidAmount - Amount to bid\n   * @returns true if the bid is or will be a winning bid\n   * @twfeature EnglishAuctions\n   */\n  async isWinningBid(auctionId, bidAmount) {\n    return await this.contractWrapper.read(\"isNewWinningBid\", [auctionId, bidAmount]);\n  }\n\n  /**\n   * Get the winner for a specific english auction\n   *\n   * @remarks Get the winner of the auction after an auction ends.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of a closed english auction\n   * const auctionId = 0;\n   * const auctionWinner = await contract.englishAuctions.getWinner(auctionId);\n   * ```\n   * @param auctionId - the auction Id\n   * @returns The address of the auction winner\n   * @twfeature EnglishAuctions\n   */\n  async getWinner(auctionId) {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const bid = await this.contractWrapper.read(\"getWinningBid\", [auctionId]);\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    const endTime = BigNumber.from(auction.endTimeInSeconds);\n\n    // if we have a winner in the map and the current time is past the endtime of the auction return the address of the winner\n    if (now.gt(endTime) && bid._bidder !== constants.AddressZero) {\n      return bid._bidder;\n    }\n    // otherwise fall back to query filter things\n\n    // TODO this should be via indexer or direct contract call\n    const contractEvent = new ContractEvents(this.contractWrapper);\n    const closedAuctions = await contractEvent.getEvents(\"AuctionClosed\");\n    const closed = closedAuctions.find(a => a.data.auctionId.eq(BigNumber.from(auctionId)));\n    if (!closed) {\n      throw new Error(`Could not find auction with ID ${auctionId} in closed auctions`);\n    }\n    return closed.data.winningBidder;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create an english auction\n   *\n   * @remarks Create a new auction where people can bid on an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the auction you want to create\n   * const auction = {\n   *   // address of the contract of the asset you want to auction\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to auction\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to auction\n   *   quantity: 1,\n   *   // address of the currency contract that will be used to pay for the auctioned tokens\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // the minimum bid that will be accepted for the token\n   *   minimumBidAmount: \"1.5\",\n   *   // how much people would have to bid to instantly buy the asset\n   *   buyoutBidAmount: \"10\",\n   *   // If a bid is made less than these many seconds before expiration, the expiration time is increased by this.\n   *   timeBufferInSeconds: \"900\", // 15 minutes by default\n   *   // A bid must be at least this much bps greater than the current winning bid\n   *   bidBufferBps: \"500\", // 5% by default\n   *   // when should the auction open up for bidding\n   *   startTimestamp: new Date(Date.now()),\n   *   // end time of auction\n   *   endTimestamp: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000),\n   * }\n   *\n   * const tx = await contract.englishAuctions.createAuction(auction);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created auction\n   * ```\n   * @param auction - the auction data\n   * @returns The transaction hash and the auction id\n   * @twfeature EnglishAuctions\n   */\n  createAuction = /* @__PURE__ */buildTransactionFunction(async auction => {\n    const parsedAuction = EnglishAuctionInputParamsSchema.parse(auction);\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), parsedAuction.assetContractAddress, parsedAuction.tokenId, await this.contractWrapper.getSignerAddress());\n    const normalizedBuyoutAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.buyoutBidAmount, parsedAuction.currencyContractAddress);\n    const normalizedMinBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), parsedAuction.minimumBidAmount, parsedAuction.currencyContractAddress);\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    if (parsedAuction.startTimestamp.lt(blockTime)) {\n      parsedAuction.startTimestamp = BigNumber.from(blockTime);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"createAuction\",\n      args: [{\n        assetContract: parsedAuction.assetContractAddress,\n        tokenId: parsedAuction.tokenId,\n        quantity: parsedAuction.quantity,\n        currency: cleanCurrencyAddress(parsedAuction.currencyContractAddress),\n        minimumBidAmount: normalizedMinBidAmount,\n        buyoutBidAmount: normalizedBuyoutAmount,\n        timeBufferInSeconds: parsedAuction.timeBufferInSeconds,\n        bidBufferBps: parsedAuction.bidBufferBps,\n        startTimestamp: parsedAuction.startTimestamp,\n        endTimestamp: parsedAuction.endTimestamp\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"NewAuction\", receipt.logs)[0];\n        return {\n          id: event.args.auctionId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Create a batch of new auctions\n   *\n   * @remarks Create a batch of new auctions on the marketplace\n   *\n   * @example\n   * ```javascript\n   * const auctions = [...];\n   * const tx = await contract.englishAuctions.createAuctionsBatch(auctions);\n   * ```\n   */\n  createAuctionsBatch = /* @__PURE__ */buildTransactionFunction(async listings => {\n    const data = (await Promise.all(listings.map(listing => this.createAuction.prepare(listing)))).map(tx => tx.encode());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"multicall\",\n      args: [data],\n      parse: receipt => {\n        const events = this.contractWrapper.parseLogs(\"NewAuction\", receipt?.logs);\n        return events.map(event => {\n          return {\n            id: event.args.auctionId,\n            receipt\n          };\n        });\n      }\n    });\n  });\n\n  /**\n   * Buyout an english auction\n   *\n   * @remarks Buy a specific auction from the marketplace.\n   *\n   * @example\n   * ```javascript\n   * // The auction ID you want to buy\n   * const auctionId = 0;\n   *\n   * await contract.englishAuctions.buyoutAuction(auctionId);\n   * ```\n   * @param auctionId - the auction id\n   * @returns The transaction result\n   * @twfeature EnglishAuctions\n   */\n  buyoutAuction = /* @__PURE__ */buildTransactionFunction(async auctionId => {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const currencyMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), auction.currencyContractAddress);\n    return this.makeBid.prepare(auctionId, utils.formatUnits(auction.buyoutBidAmount, currencyMetadata.decimals));\n  });\n\n  /**\n   * Bid on an english auction\n   *\n   * @remarks Make a bid on an auction\n   *\n   * @example\n   * ```javascript\n   * // The auction ID of the asset you want to bid on\n   * const auctionId = 0;\n   * // The total amount you are willing to bid for auctioned tokens\n   * const bidAmount = 1;\n   *\n   * await contract.englishAuctions.makeBid(auctionId, bidAmount);\n   * ```\n   * @param auctionId - the auction id\n   * @param bidAmount - the amount you are willing to bid\n   * @returns The transaction result\n   * @twfeature EnglishAuctions\n   */\n  makeBid = /* @__PURE__ */buildTransactionFunction(async (auctionId, bidAmount) => {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    const normalizedBidAmount = await normalizePriceValue(this.contractWrapper.getProvider(), bidAmount, auction.currencyContractAddress);\n    if (normalizedBidAmount.eq(BigNumber.from(0))) {\n      throw new Error(\"Cannot make a bid with 0 value\");\n    }\n    if (BigNumber.from(auction.buyoutBidAmount).gt(0) && normalizedBidAmount.gt(auction.buyoutBidAmount)) {\n      throw new Error(\"Bid amount must be less than or equal to buyoutBidAmount\");\n    }\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      const isWinnner = await this.isWinningBid(auctionId, normalizedBidAmount);\n      invariant(isWinnner, \"Bid price is too low based on the current winning bid and the bid buffer\");\n    } else {\n      const tokenPrice = normalizedBidAmount;\n      const minimumBidAmount = BigNumber.from(auction.minimumBidAmount);\n      invariant(tokenPrice.gte(minimumBidAmount), \"Bid price is too low based on minimum bid amount\");\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await setErc20Allowance(this.contractWrapper, normalizedBidAmount, auction.currencyContractAddress, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"bidInAuction\",\n      args: [auctionId, normalizedBidAmount],\n      overrides\n    });\n  });\n\n  /**\n   * Cancel an english auction\n   *\n   * @remarks Cancel an auction on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to cancel\n   * const auctionId = \"0\";\n   *\n   * await contract.englishAuctions.cancelAuction(auctionId);\n   * ```\n   * @param auctionId - the auction id\n   * @returns The transaction result\n   * @twfeature EnglishAuctions\n   */\n  cancelAuction = /* @__PURE__ */buildTransactionFunction(async auctionId => {\n    const winningBid = await this.getWinningBid(auctionId);\n    if (winningBid) {\n      throw new Error(`Bids already made.`);\n    }\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelAuction\",\n      args: [auctionId]\n    });\n  });\n\n  /**\n   * Close the english auction for the bidder\n   *\n   * @remarks Closes the Auction and executes the sale for the buyer.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.closeAuctionForBidder(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   * @param closeFor - optionally pass the winning bid offeror address to close the auction on their behalf\n   * @returns The transaction result\n   * @twfeature EnglishAuctions\n   */\n  closeAuctionForBidder = /* @__PURE__ */buildTransactionFunction(async (auctionId, closeFor) => {\n    if (!closeFor) {\n      closeFor = await this.contractWrapper.getSignerAddress();\n    }\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"collectAuctionTokens\",\n        args: [BigNumber.from(auctionId)]\n      });\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Close the english auction for the seller\n   *\n   * @remarks Closes the Auction and executes the sale for the seller.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auctionId = \"0\";\n   * await contract.englishAuctions.closeAuctionForSeller(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction id to close\n   * @returns The transaction result\n   * @twfeature EnglishAuctions\n   */\n  closeAuctionForSeller = /* @__PURE__ */buildTransactionFunction(async auctionId => {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"collectAuctionPayout\",\n        args: [BigNumber.from(auctionId)]\n      });\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Close the english auction for both the seller and the bidder\n   *\n   * @remarks Closes the Auction and executes the sale for both parties.\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to close\n   * const auction = \"0\";\n   * await contract.englishAuctions.executeSale(auctionId);\n   * ```\n   *\n   * @param auctionId - the auction to close\n   * @returns The transaction result\n   * @twfeature EnglishAuctions\n   */\n  executeSale = /* @__PURE__ */buildTransactionFunction(async auctionId => {\n    const auction = await this.validateAuction(BigNumber.from(auctionId));\n    try {\n      const winningBid = await this.getWinningBid(auctionId);\n      invariant(winningBid, \"No winning bid found\");\n      const closeForSeller = this.encoder.encode(\"collectAuctionPayout\", [auctionId]);\n      const closeForBuyer = this.encoder.encode(\"collectAuctionTokens\", [auctionId]);\n      return Transaction.fromContractWrapper({\n        contractWrapper: this.contractWrapper,\n        method: \"multicall\",\n        args: [[closeForSeller, closeForBuyer]]\n      });\n    } catch (err) {\n      if (err.message.includes(\"Marketplace: auction still active.\")) {\n        throw new AuctionHasNotEndedError(auctionId.toString(), auction.endTimeInSeconds.toString());\n      } else {\n        throw err;\n      }\n    }\n  });\n\n  /**\n   * Get the buffer for an english auction\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to get the buffer for\n   * const auctionId = \"0\";\n   * const buffer = await contract.englishAuctions.getBidBufferBps(auctionId);\n   * ```\n   *\n   * @param auctionId - id of the auction\n   * @returns The buffer in basis points\n   * @twfeature EnglishAuctions\n   */\n  async getBidBufferBps(auctionId) {\n    return (await this.getAuction(auctionId)).bidBufferBps;\n  }\n\n  /**\n   * Get the minimum next bid for an english auction\n   *\n   * @example\n   * ```javascript\n   * // The ID of the auction you want to get the minimum next bid for\n   * const auctionId = \"0\";\n   * const minimumNextBid = await contract.englishAuctions.getMinimumNextBid(auctionId);\n   * ```\n   *\n   * @returns The minimum bid a user can place to outbid the previous highest bid\n   * @param auctionId - id of the auction\n   * @twfeature EnglishAuctions\n   */\n  async getMinimumNextBid(auctionId) {\n    // we can fetch all of these at the same time using promise.all\n    const [currentBidBufferBps, winningBid, auction] = await Promise.all([this.getBidBufferBps(auctionId), this.getWinningBid(auctionId), this.validateAuction(BigNumber.from(auctionId))]);\n    const currentBidOrReservePrice = winningBid ?\n    // if there is a winning bid use the value of it\n    BigNumber.from(winningBid.bidAmount) :\n    // if there is no winning bid use the reserve price\n    BigNumber.from(auction.minimumBidAmount);\n    const minimumNextBid = currentBidOrReservePrice.add(\n    // the addition of the current bid and the buffer\n    // (have to divide by 10000 to get the fraction of the buffer (since it's in basis points))\n    currentBidOrReservePrice.mul(currentBidBufferBps).div(10000));\n\n    // it's more useful to return a currency value here\n    return fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currencyContractAddress, minimumNextBid);\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if auction could not be found\n   *\n   * @param auctionId - Auction to check for\n   */\n  async validateAuction(auctionId) {\n    try {\n      return await this.getAuction(auctionId);\n    } catch (err) {\n      console.error(`Error getting the auction with id ${auctionId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the auction to the auction interface.\n   *\n   * @internal\n   * @param auction - The auction to map, as returned from the contract.\n   * @returns  The mapped interface.\n   */\n  async mapAuction(auction) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (auction.status) {\n      case 1:\n        status = BigNumber.from(auction.startTimestamp).gt(blockTime) ? Status.Created : BigNumber.from(auction.endTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: auction.auctionId.toString(),\n      creatorAddress: auction.auctionCreator,\n      assetContractAddress: auction.assetContract,\n      tokenId: auction.tokenId.toString(),\n      quantity: auction.quantity.toString(),\n      currencyContractAddress: auction.currency,\n      minimumBidAmount: auction.minimumBidAmount.toString(),\n      minimumBidCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.minimumBidAmount),\n      buyoutBidAmount: auction.buyoutBidAmount.toString(),\n      buyoutCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), auction.currency, auction.buyoutBidAmount),\n      timeBufferInSeconds: BigNumber.from(auction.timeBufferInSeconds).toNumber(),\n      bidBufferBps: BigNumber.from(auction.bidBufferBps).toNumber(),\n      startTimeInSeconds: BigNumber.from(auction.startTimestamp).toNumber(),\n      endTimeInSeconds: BigNumber.from(auction.endTimestamp).toNumber(),\n      asset: await fetchTokenMetadataForContract(auction.assetContract, this.contractWrapper.getProvider(), auction.tokenId, this.storage),\n      status: status\n    };\n  }\n\n  /**\n   * Maps an auction-bid to the strict interface\n   *\n   * @internal\n   * @param bid - The bid to map, as returned from the contract.\n   * @returns  A `Bid` object\n   */\n  async mapBid(auctionId, bidderAddress, currencyContractAddress, bidAmount) {\n    const resolvedBidderAddress = await resolveAddress(bidderAddress);\n    const resolvedCurrencyAddress = await resolveAddress(currencyContractAddress);\n    return {\n      auctionId,\n      bidderAddress: resolvedBidderAddress,\n      currencyContractAddress: resolvedCurrencyAddress,\n      bidAmount,\n      bidAmountCurrencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedCurrencyAddress, bidAmount)\n    };\n  }\n  async applyFilter(auctions, filter) {\n    let rawAuctions = [...auctions];\n    if (filter) {\n      if (filter.seller) {\n        const resolvedSeller = await resolveAddress(filter.seller);\n        rawAuctions = rawAuctions.filter(seller => seller.auctionCreator.toString().toLowerCase() === resolvedSeller?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawAuctions = rawAuctions.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawAuctions.length ? rawAuctions.slice(0, filter.count) : rawAuctions;\n  }\n}\n\n/**\n * @internal\n */\nconst OfferInputParamsSchema = /* @__PURE__ */(() => z.object({\n  /**\n   * The address of the asset being sought.\n   */\n  assetContractAddress: AddressOrEnsSchema,\n  /**\n   * The ID of the token.\n   */\n  tokenId: BigNumberishSchema,\n  /**\n   * The quantity of tokens to buy.\n   *\n   * For ERC721s, this value should always be 1 (and will be forced internally regardless of what is passed here).\n   */\n  quantity: BigNumberishSchema.default(1),\n  /**\n   * The address of the currency offered for the NFTs.\n   */\n  currencyContractAddress: AddressOrEnsSchema.default(NATIVE_TOKEN_ADDRESS),\n  /**\n   * The total offer amount for the NFTs.\n   */\n  totalPrice: AmountSchema,\n  /**\n   * The end time of the offer.\n   */\n  endTimestamp: EndDateSchema\n}))();\n\n/**\n * @public\n */\n\n/**\n * Handles marketplace offers\n * @public\n */\nclass MarketplaceV3Offers {\n  featureName = FEATURE_OFFERS.name;\n\n  // utilities\n\n  constructor(contractWrapper, storage) {\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.events = new ContractEvents(this.contractWrapper);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total number of offers\n   *\n   * @returns Returns the total number of offers created.\n   * @public\n   *\n   * @example\n   * ```javascript\n   * const totalOffers = await contract.offers.getTotalCount();\n   * ```\n   * @twfeature Offers\n   */\n  async getTotalCount() {\n    return await this.contractWrapper.read(\"totalOffers\", []);\n  }\n\n  /**\n   * Get all offers\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAll();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns The Offer object array\n   * @twfeature Offers\n   */\n  async getAll(filter) {\n    const totalOffers = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllOffers\", [startId, endId]));\n    rawOffers = batches.flat();\n    const filteredOffers = await this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get all valid offers\n   *\n   * @example\n   * ```javascript\n   * const offers = await contract.offers.getAllValid();\n   * ```\n   *\n   * @param filter - optional filter parameters\n   * @returns The Offer object array\n   * @twfeature Offers\n   */\n  async getAllValid(filter) {\n    const totalOffers = await this.getTotalCount();\n    const start = BigNumber.from(filter?.start || 0).toNumber();\n    const end = totalOffers.toNumber();\n    if (end === 0) {\n      throw new Error(`No offers exist on the contract.`);\n    }\n    let rawOffers = [];\n    const batches = await getAllInBatches(start, end, (startId, endId) => this.contractWrapper.read(\"getAllValidOffers\", [startId, endId]));\n    rawOffers = batches.flat();\n    const filteredOffers = await this.applyFilter(rawOffers, filter);\n    return await Promise.all(filteredOffers.map(offer => this.mapOffer(offer)));\n  }\n\n  /**\n   * Get a single offer\n   *\n   * @example\n   * ```javascript\n   * const offerId = 0;\n   * const offer = await contract.offers.getOffer(offerId);\n   * ```\n   *\n   * @param offerId - the listing id\n   * @returns The Direct listing object\n   * @twfeature Offers\n   */\n  async getOffer(offerId) {\n    const offer = await this.contractWrapper.read(\"getOffer\", [offerId]);\n    return await this.mapOffer(offer);\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Make an offer\n   *\n   * @remarks Make an offer on the marketplace for an asset.\n   *\n   * @example\n   * ```javascript\n   * // Data of the offer you want to make\n   * const offer = {\n   *   // address of the contract the asset you want to make an offer for\n   *   assetContractAddress: \"0x...\",\n   *   // token ID of the asset you want to buy\n   *   tokenId: \"0\",\n   *   // how many of the asset you want to buy\n   *   quantity: 1,\n   *   // address of the currency contract that you offer to pay in\n   *   currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n   *   // Total price you offer to pay for the mentioned token(s)\n   *   totalPrice: \"1.5\",\n   *   // Offer valid until\n   *   endTimestamp: new Date(),\n   * }\n   *\n   * const tx = await contract.offers.makeOffer(offer);\n   * const receipt = tx.receipt; // the transaction receipt\n   * const id = tx.id; // the id of the newly created offer\n   * ```\n   * @param offer - the offer data\n   * @returns The transaction receipt and the id of the newly created offer\n   * @twfeature Offers\n   */\n  makeOffer = /* @__PURE__ */buildTransactionFunction(async offer => {\n    const parsedOffer = await OfferInputParamsSchema.parseAsync(offer);\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(parsedOffer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : parsedOffer.currencyContractAddress;\n    const normalizedTotalPrice = await normalizePriceValue(this.contractWrapper.getProvider(), parsedOffer.totalPrice, currency);\n    const overrides = await this.contractWrapper.getCallOverrides();\n    await setErc20Allowance(this.contractWrapper, normalizedTotalPrice, currency, overrides);\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"makeOffer\",\n      args: [{\n        assetContract: parsedOffer.assetContractAddress,\n        tokenId: parsedOffer.tokenId,\n        quantity: parsedOffer.quantity,\n        currency: currency,\n        totalPrice: normalizedTotalPrice,\n        expirationTimestamp: parsedOffer.endTimestamp\n      }],\n      parse: receipt => {\n        const event = this.contractWrapper.parseLogs(\"NewOffer\", receipt?.logs);\n        return {\n          id: event[0].args.offerId,\n          receipt\n        };\n      }\n    });\n  });\n\n  /**\n   * Cancel an offer\n   *\n   * @remarks Cancel an offer on the marketplace\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to cancel\n   * const offerId = \"0\";\n   *\n   * await contract.offers.cancelOffer(offerId);\n   * ```\n   * @param offerId - the offer id\n   * @returns The transaction receipt\n   * @twfeature Offers\n   */\n  cancelOffer = /* @__PURE__ */buildTransactionFunction(async offerId => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"cancelOffer\",\n      args: [offerId]\n    });\n  });\n\n  /**\n   * Accept an offer\n   *\n   * @example\n   * ```javascript\n   * // The ID of the offer you want to accept\n   * const offerId = 0;\n   *\n   * await contract.offers.acceptOffer(offerId);\n   * ```\n   *\n   * @param offerId - The offer id\n   * @returns The transaction receipt\n   * @twfeature Offers\n   */\n  acceptOffer = /* @__PURE__ */buildTransactionFunction(async offerId => {\n    const offer = await this.validateOffer(BigNumber.from(offerId));\n    const {\n      valid,\n      error\n    } = await this.isStillValidOffer(offer);\n    if (!valid) {\n      throw new Error(`Offer ${offerId} is no longer valid. ${error}`);\n    }\n    const overrides = (await this.contractWrapper.getCallOverrides()) || {};\n    await handleTokenApproval(this.contractWrapper, this.getAddress(), offer.assetContractAddress, offer.tokenId, await this.contractWrapper.getSignerAddress());\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"acceptOffer\",\n      args: [offerId],\n      overrides\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  /**\n   * Throws error if offer could not be found\n   *\n   * @param offerId - offer to check for\n   */\n  async validateOffer(offerId) {\n    try {\n      return await this.getOffer(offerId);\n    } catch (err) {\n      console.error(`Error getting the offer with id ${offerId}`);\n      throw err;\n    }\n  }\n\n  /**\n   * Helper method maps the offer to the offer interface.\n   *\n   * @internal\n   * @param offer - The offer to map, as returned from the contract.\n   * @returns  The mapped interface.\n   */\n  async mapOffer(offer) {\n    let status = Status.UNSET;\n    const block = await this.contractWrapper.getProvider().getBlock(\"latest\");\n    const blockTime = block.timestamp;\n    switch (offer.status) {\n      case 1:\n        status = BigNumber.from(offer.expirationTimestamp).lt(blockTime) ? Status.Expired : Status.Active;\n        break;\n      case 2:\n        status = Status.Completed;\n        break;\n      case 3:\n        status = Status.Cancelled;\n        break;\n    }\n    return {\n      id: offer.offerId.toString(),\n      offerorAddress: offer.offeror,\n      assetContractAddress: offer.assetContract,\n      currencyContractAddress: offer.currency,\n      tokenId: offer.tokenId.toString(),\n      quantity: offer.quantity.toString(),\n      totalPrice: offer.totalPrice.toString(),\n      currencyValue: await fetchCurrencyValue(this.contractWrapper.getProvider(), offer.currency, offer.totalPrice),\n      asset: await fetchTokenMetadataForContract(offer.assetContract, this.contractWrapper.getProvider(), offer.tokenId, this.storage),\n      endTimeInSeconds: BigNumber.from(offer.expirationTimestamp).toNumber(),\n      status: status\n    };\n  }\n\n  /**\n   * Use this method to check if an offer is still valid.\n   *\n   * Ways an offer can become invalid:\n   * 1. The offer has expired\n   * 2. The offeror doesn't have enough balance of currency tokens\n   * 3. The offeror removed the approval of currency tokens on the marketplace\n   *\n   * @internal\n   * @param offer - The offer to check.\n   * @returns  True if the offer is valid, false otherwise.\n   */\n  async isStillValidOffer(offer) {\n    const now = BigNumber.from(Math.floor(Date.now() / 1000));\n    if (now.gt(offer.endTimeInSeconds)) {\n      return {\n        valid: false,\n        error: `Offer with ID ${offer.id} has expired`\n      };\n    }\n    const chainId = await this.contractWrapper.getChainID();\n    const currency = isNativeToken(offer.currencyContractAddress) ? NATIVE_TOKENS[chainId].wrapped.address : offer.currencyContractAddress;\n    const provider = this.contractWrapper.getProvider();\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new ContractWrapper(provider, currency, ERC20Abi, {}, this.storage);\n    const offerorBalance = await erc20.read(\"balanceOf\", [offer.offerorAddress]);\n    if (offerorBalance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} doesn't have enough balance of token ${currency}`\n      };\n    }\n    const offerorAllowance = await erc20.read(\"allowance\", [offer.offerorAddress, this.getAddress()]);\n    if (offerorAllowance.lt(offer.totalPrice)) {\n      return {\n        valid: false,\n        error: `Offeror ${offer.offerorAddress} hasn't approved enough amount of token ${currency}`\n      };\n    }\n    return {\n      valid: true,\n      error: \"\"\n    };\n  }\n  async applyFilter(offers, filter) {\n    let rawOffers = [...offers];\n    if (filter) {\n      if (filter.offeror) {\n        const resolvedOfferor = await resolveAddress(filter.offeror);\n        rawOffers = rawOffers.filter(offeror => offeror.offeror.toString().toLowerCase() === resolvedOfferor?.toString().toLowerCase());\n      }\n      if (filter.tokenContract) {\n        const resolvedToken = await resolveAddress(filter.tokenContract);\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.assetContract.toString().toLowerCase() === resolvedToken?.toString().toLowerCase());\n      }\n      if (filter.tokenId !== undefined) {\n        rawOffers = rawOffers.filter(tokenContract => tokenContract.tokenId.toString() === filter?.tokenId?.toString());\n      }\n    }\n    return filter?.count && filter.count < rawOffers.length ? rawOffers.slice(0, filter.count) : rawOffers;\n  }\n}\n\nexport { MarketplaceV3DirectListings as M, Status as S, MarketplaceV3EnglishAuctions as a, MarketplaceV3Offers as b };\n"],"names":["constants.AddressZero","utils.formatUnits"],"mappings":"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"}