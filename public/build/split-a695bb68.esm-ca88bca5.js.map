{"version":3,"file":"split-a695bb68.esm-ca88bca5.js","sources":["../../node_modules/@thirdweb-dev/sdk/dist/split-a695bb68.esm.js"],"sourcesContent":["import { BigNumber, Contract } from 'ethers';\nimport { C as ContractEncoder, a as fetchCurrencyValue } from './fetchCurrencyValue-f402c164.esm.js';\nimport { dK as ADMIN_ROLE, cu as ContractWrapper, bn as AbiSchema, c9 as SplitsContractSchema, aP as resolveAddress } from './index-4902f18c.esm.js';\nimport { b as buildTransactionFunction, T as Transaction } from './transactions-bf210f84.esm.js';\nimport { C as ContractMetadata, b as ContractAppURI, G as GasCostEstimator, a as ContractEvents } from './contract-appuri-c2530b2f.esm.js';\nimport { C as ContractInterceptor } from './contract-interceptor-69c9c882.esm.js';\nimport { C as ContractRoles } from './contract-roles-107ca68a.esm.js';\nimport 'zod';\nimport '@thirdweb-dev/chains';\nimport '@thirdweb-dev/crypto';\nimport 'tiny-invariant';\nimport 'bn.js';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Permit.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721AQueryableUpgradeable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/SharedMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/zora_IERC721Drop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILoyaltyCard.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/INFTMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAirdropERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountFactoryCore.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccountPermissions_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAccount.json';\nimport 'ethers/lib/utils';\nimport 'eventemitter3';\nimport '@thirdweb-dev/storage';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\n// TODO create extension wrappers for this\nclass Split {\n  static contractRoles = ADMIN_ROLE;\n\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options, storage);\n    this._chainId = chainId;\n    this.abi = AbiSchema.parse(abi || []);\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.app = new ContractAppURI(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.read(\"payeeCount\", []);\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.read(\"payee\", [index]);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const [resolvedToken, recipients] = await Promise.all([resolveAddress(tokenAddress), this.getAllRecipients()]);\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, resolvedToken);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const [resolvedAddress, walletBalance, totalReleased] = await Promise.all([resolveAddress(address), this.contractWrapper.getProvider().getBalance(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(resolvedAddress, totalReceived, await this.contractWrapper.read(\"released\", [resolvedAddress]));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const [resolvedToken, resolvedWallet] = await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)]);\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20 = new Contract(resolvedToken, ERC20Abi, this.contractWrapper.getProvider());\n    const [walletBalance, totalReleased, alreadyReleased] = await Promise.all([erc20.balanceOf(this.getAddress()), this.contractWrapper.read(\"totalReleased\", [resolvedToken]), this.contractWrapper.read(\"released\", [resolvedToken, resolvedWallet])]);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(resolvedWallet, totalReceived, alreadyReleased);\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), resolvedToken, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [resolvedAddress, totalShares, walletsShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", []), this.contractWrapper.read(\"shares\", [address])]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address: resolvedAddress,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  withdraw = /* @__PURE__ */buildTransactionFunction(async walletAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address)\",\n      args: [await resolveAddress(walletAddress)]\n    });\n  });\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  withdrawToken = /* @__PURE__ */buildTransactionFunction(async (walletAddress, tokenAddress) => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"release(address,address)\",\n      args: await Promise.all([resolveAddress(tokenAddress), resolveAddress(walletAddress)])\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  distribute = /* @__PURE__ */buildTransactionFunction(async () => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute()\",\n      args: []\n    });\n  });\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  distributeToken = /* @__PURE__ */buildTransactionFunction(async tokenAddress => {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"distribute(address)\",\n      args: [await resolveAddress(tokenAddress)]\n    });\n  });\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const [resolvedAddress, totalShares] = await Promise.all([resolveAddress(address), this.contractWrapper.read(\"totalShares\", [])]);\n    const addressReceived = totalReceived.mul(await this.contractWrapper.read(\"shares\", [resolvedAddress]));\n    const totalRoyaltyAvailable = addressReceived.div(totalShares);\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return Transaction.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\nexport { Split };\n"],"names":[],"mappings":"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"}